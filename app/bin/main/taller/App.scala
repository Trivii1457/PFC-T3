/*
 * This Scala source file was generated by the Gradle 'init' task.
 */
package taller
import Math.pow
import scala.collection.parallel.CollectionConverters._

object App {
  def main(args: Array[String]): Unit = {
    println(greeting())

    val Riego = new Finca()
    val Bench = new Benchmark()

    //Probando funciones de la finca
    val f = Riego.FincaALAzar(6)
    val d = Riego.DistanciaAlAzar(6)
    val p = Riego.ProgramacionAlAlzar(4)
    println(f"\n{$f}")
    println(f"\n{$d}")
    println(f"\n{$p}")

    //Probando funciones de benchmark
    val res1 = Bench.comparacionCostoRiego(f, p)
    val res2 = Bench.comparacionCostoMov(f, p, d)
    val res3 = Bench.compararGenProgramaciones(f)

    println(res1)
    println(res2)
    println(res3)
    
    val e1 = Riego.tsup(f, 2)
    val e2 = Riego.treg(f, 2)
    val e3 = Riego.prio(f, 2)

    println(e1)
    println(e2)
    println(e3)

    val i1 = Riego.tIR(f, p)
    println(i1)

    val i2 = Riego.costoRiegoTablon(2, f, p)
    println(i2)

    val i3 = Riego.costoRiegoFinca(f, p)
    println(i3)

    val i4 = Riego.costoMovilidad(f, p, d)
    println(i4)

    val i5 = Riego.generarProgramacionesRiego(f)

    println(f"\n{$i5}")

    val i6 = Riego.ProgramacionRiegoOptimo(f, d)
    println(f"\n{$i6}")
    println("-------------------"*5)
    println("-------------------"*5)



    println("\nBenchmarking")
    println("Comparacion de costos de riego")
    pruebasCostoRiego()
    println("\n-------------------")
    println("Comparacion de costos de movilidad")
    pruebasCostoMov()
    println("\n-------------------")
    println("Comparacion de generacion de programaciones")
    pruebasGenProgramaciones()
    println("\n-------------------")
    println("Comparacion de programaciones optimas")
    pruebasProgOptimas()
    println("\n-------------------")
    println("Fin Benchmarking")

    println("-------------------"*5)

    


    
  }

  def Comprobando (): Unit = {
    type Tablon = (Int, Int, Int)

    type finca = Vector[Tablon]

    type Distancia = Vector[Vector[Int]]

    type ProgRiego = Vector[Int]

    type  TiempoInicioRiego = Vector[Int]
    
    val Riego = new Finca()

   val finca2 = Vector((1, 2, 3), (4, 5, 6))
   val finca3 = Vector((1, 2, 3), (4, 5, 6), (7, 8, 9))
   val finca4 = Vector((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12))
   val finca5 = Vector((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15))
   val finca6 = Vector((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15), (16, 17, 18))

   val progRiego3 = Vector(0, 1, 2)
   val progRiego2 = Vector(0, 1)
   val progRiego4 = Vector(0, 1, 2, 3)
    val progRiego5 = Vector(0, 1, 2, 3, 4)
   val progRiego6 = Vector(0, 1, 2, 3, 4, 5)

  val distancia2: Distancia = Vector(
    Vector(0, 1),
    Vector(1, 0)
  )

  val distancia3: Distancia = Vector(
    Vector(0, 1, 2),
    Vector(1, 0, 1),
    Vector(2, 1, 0)
  )

  val distancia4: Distancia = Vector(
    Vector(0, 1, 2, 3),
    Vector(1, 0, 1, 2),
    Vector(2, 1, 0, 1),
    Vector(3, 2, 1, 0)
  )

  val distancia5: Distancia = Vector(
    Vector(0, 1, 2, 3, 4),
    Vector(1, 0, 1, 2, 3),
    Vector(2, 1, 0, 1, 2),
    Vector(3, 2, 1, 0, 1),
    Vector(4, 3, 2, 1, 0)
  )

  val distancia6: Distancia = Vector(
    Vector(0, 1, 2, 3, 4, 5),
    Vector(1, 0, 1, 2, 3, 4),
    Vector(2, 1, 0, 1, 2, 3),
    Vector(3, 2, 1, 0, 1, 2),
    Vector(4, 3, 2, 1, 0, 1),
    Vector(5, 4, 3, 2, 1, 0)
  )

  println(Riego.costoRiegoTablon(0, finca2, progRiego2))
  println(Riego.costoRiegoTablon(1, finca3, progRiego3))
  println(Riego.costoRiegoTablon(2, finca4, progRiego4))
  println(Riego.costoRiegoTablon(3, finca5, progRiego5))
  println(Riego.costoRiegoTablon(4, finca6, progRiego6))

  println(Riego.costoRiegoFinca(finca2, progRiego2))
  println(Riego.costoRiegoFinca(finca3, progRiego3))
  println(Riego.costoRiegoFinca(finca4, progRiego4))
  println(Riego.costoRiegoFinca(finca5, progRiego5))
  println(Riego.costoRiegoFinca(finca6, progRiego6))

  println(Riego.costoMovilidad(finca2, progRiego2, distancia2))
  println(Riego.costoMovilidad(finca3, progRiego3, distancia3))
  println(Riego.costoMovilidad(finca4, progRiego4, distancia4))
  println(Riego.costoMovilidad(finca5, progRiego5, distancia5))
  println(Riego.costoMovilidad(finca6, progRiego6, distancia6))
  

  println(Riego.costoMovilidadPar(finca2, progRiego2, distancia2))
  println(Riego.costoMovilidadPar(finca3, progRiego3, distancia3))
  println(Riego.costoMovilidadPar(finca4, progRiego4, distancia4))
  println(Riego.costoMovilidadPar(finca5, progRiego5, distancia5))
  println(Riego.costoMovilidadPar(finca6, progRiego6, distancia6))

  println(Riego.generarProgramacionesRiego(finca2).length)
  println(Riego.generarProgramacionesRiego(finca3).length)
  println(Riego.generarProgramacionesRiego(finca4).length)
  println(Riego.generarProgramacionesRiego(finca5).length)
  println(Riego.generarProgramacionesRiego(finca6).length)

  println(Riego.ProgramacionRiegoOptimo(finca2, distancia2)._1.length)
  println(Riego.ProgramacionRiegoOptimo(finca3, distancia3)._1.length)
  println(Riego.ProgramacionRiegoOptimo(finca4, distancia4)._1.length)
  println(Riego.ProgramacionRiegoOptimo(finca5, distancia5)._1.length)
  println(Riego.ProgramacionRiegoOptimo(finca6, distancia6)._1.length)

  println(Riego.costoRiegoFincaPar(finca2, progRiego2))
  println(Riego.costoRiegoFincaPar(finca3, progRiego3))
  println(Riego.costoRiegoFincaPar(finca4, progRiego4))
  println(Riego.costoRiegoFincaPar(finca5, progRiego5))
  println(Riego.costoRiegoFincaPar(finca6, progRiego6))


  }

  def pruebasCostoRiego(): Unit = {

    val Riego = new Finca()
    val Bench = new Benchmark()

    for (i <- 1 to 9){
      val f = Riego.FincaALAzar(i)
      val p = Riego.ProgramacionAlAlzar(i)
      val res1 = Bench.comparacionCostoRiego(f, p)
      print(f"\nIteracion: {$i}")
      println(res1)
    } 
  }

  def pruebasCostoMov(): Unit = {

    val Riego = new Finca()
    val Bench = new Benchmark()

    for (i <- 1 to 9){
     val f = Riego.FincaALAzar(i)
      val d = Riego.DistanciaAlAzar(i)
      val p = Riego.ProgramacionAlAlzar(i)
      val res2 = Bench.comparacionCostoMov(f, p, d)
      print(f"\nIteracion: {$i}")
      println(res2)
    } 
  }

  def pruebasGenProgramaciones(): Unit = {

    val Riego = new Finca()
    val Bench = new Benchmark()

    for (i <- 1 to 9){
      val f = Riego.FincaALAzar(i)
      val d = Riego.DistanciaAlAzar(i)
      val res3 = Bench.compararGenProgramaciones(f)
      print(f"\nIteracion: {$i}")
      println(res3)
    } 
  }
   
  def pruebasProgOptimas(): Unit = {

    val Riego = new Finca()
    val Bench = new Benchmark()
    for (i <- 1 to 9){
      val f = Riego.FincaALAzar(i)
      val d = Riego.DistanciaAlAzar(i)
      val res4 = Bench.compararProgOptimas(f, d)
      print(f"\nIteracion: {$i} ")
      println(res4)
    } 
  }


  def greeting(): String = "Hello, world!"
}
